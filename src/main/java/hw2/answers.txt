CSE 331 Homework 2.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Justin Wang

Problem 0.

(a)
r = p * q:
    foreach term, t_p, in p:
        foreach term t_q in q:
            if any term, t_r, in r has the same degree as t_p multiplied by t_r,
            then replace t_r in r with the product of t_p and t_q
            else insert the product of t_p and t_q into r as a new term

(b)
// truncating requires no remainder at the end, but I will be using it for now to calculate the answer
q = n / d + r:
      quotient q = 0
      remainder r = numerator n
      while degree of denominator d >= 0:
         set term lt to lead term of r, lt_r/ lead term of d, lt_d
         set q to q + lt
         for each term t_d in d:
            subtract the product of lt and t_d from r
      return q
(c)
Problem: (x^3+x-1) / (x+1) = x^2-x+2
Solution: q = n / d + r:
n = x^3 + x - 1
d = x + 1

quotient q = 0
[remainder r = numerator n] r = x^3 + x - 1
while degree of r > 0:
     Iteration 1: q = 0, n = (x^3 + x - 1), d  = (x + 1), r = (x^3 + x - 1)
     [set term lt to lead term of r, lt_r/ lead term of d, lt_d] lt = (x ^ 3 / x) = (x^2)
     [set q to q + lt] (q = x^2)
     for each term t_d in d:
        Iteration 1: q = (x^2), n = (x^3 + x - 1), d  = (x + 1), r = (x^3 + x - 1), lt (x^2), t_d = x
            [subtract the product of lt and t_d from r] r = (x - 1)
        Iteration 2: q = (x^2), n = (x^3 + x - 1), d  = (x + 1), r = (x - 1), lt = (x^2), t_d = 1
            [subtract the product of lt and t_d from r] r = (-(x^2) + x - 1)
     Iteration 2: q = (x^2), n = (x^3 + x - 1), d  = (x + 1), r = (-(x^2) + x - 1)
      [set term lt to lead term of r, lt_r/ lead term of d, lt_d] lt = (-(x^2) / x) = (-x)
      [set q to q + lt] q = (x^2 - x)
      for each term t_d in d:
         Iteration 1: q = (x^2 - x), n = (x^3 + x - 1), d  = (x + 1), r = (-(x^2) + x - 1), lt = (-x), t_d = x
             [subtract the product of lt and t_d from r] r = (x - 1)
         Iteration 2: q = (x^2 - x), n = (x^3 + x - 1), d  = (x + 1), r = (x - 1), lt = (-x), t_d = 1
             [subtract the product of lt and t_d from r] r = (-2x - 1)
    Iteration 3: q = (x^2 - x), n = (x^3 + x - 1), d  = (x + 1), r = (-2x - 1)
      [set term lt to lead term of r, lt_r/ lead term of d, lt_d] lt = (2x / x) = (2)
      [set q to q + lt] q = (x^2 - x + 2)
      for each term t_d in d:
         Iteration 1: q = (x^2 - x + 2), n = (x^3 + x - 1), d  = (x + 1), r = (-2x - 1), lt = (2), t_d = x
             [subtract the product of lt and t_d from r] r = (x - 1)
         Iteration 2: q = (q = x^2 - x), n = (x^3 + x - 1), d  = (x + 1), r = (x - 1), lt = (2), t_d = 1
             [subtract the product of lt and t_d from r] r = (1)

return q = (x^2 - x)


Problem 1.

(a)
The RatNum constructor with n and d along with checkrep will not need the gcd lines anymore, which results in
less time to perform those operations. The equals function and toString will need to implement a gcd, thus needed
more time over normal use. Overall it would make the function less efficient any property which increases the ratnum,
will make it harder to compute the gcd and will take more time than having the rep invariant enforce reduced form.

(b)
If you pass in the denominator as 0, then ratnum would turn it into nan while simply reassigning will not. The effect of
RatNum is that if the denominator is a 0, then it returns a NaN, this change will by pass that and break the effect.
This change will also fail to keep the numbers in reduced form which break the rep invariant, as the reducing fucntion
is in the constructor.

(c)
No method could ever violate the rep invariant through modification of the object, as there is no direct modification
of the object since every method that "modifies" the object just returns a new one. Since all "modify" method are just
creating a new Ratnum object by passing in new parameters, it would be sufficient to simply checkrep at the end of the
constructor.

Problem 2.

(a)
I actually did not use CheckRep() in any of the methods that I implemented. I left the only usage of Checkrep in the
constructor, because for all of my "modifying" methods I simply returned another new RatTerm. This is similar to RatNum,
in how every time a "modifying" method is called, that the constructor will check the rep invariant.

(b)
The constructor would no longer need to set terms with 0 coefficients to have a 0 exponent. You would have to change ZERO
the final int to somehow include all the other cases for 0, or you would have to replace the method isZero to account for
any exponent for zeros. This would be more messy as there would way too many ways to represent zeros that iszero would
have to deal with, and iszero would have to compare the int value of coeff to another int(0).

(c)
If you were trying to make NaN have only 0 in the exponent field, then you would have to add to the rep invariant and add
to the constructor, this would be slower as there are more operations. You probably won't have to add checkreps, since the
current implementation of the class has every method returning a new NaN, whenever one is found. Neither of these changes
are good as they do nothing but add more conditions and complications to the problem.

Problem 5.
