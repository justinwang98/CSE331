// Students should not edit this file.

plugins {
  id "net.ltgt.errorprone-base" version "0.0.13"
  id 'org.ajoberstar.grgit' version '2.3.0'
}
apply plugin: 'java'
apply from: "gradle/checkerframework.gradle"

import org.ajoberstar.grgit.Grgit

sourceCompatibility = 1.8

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  implementation group: 'asm', name: 'asm-all', version: '2.2.3' // for staff tools
  implementation group: 'org.plumelib', name: 'require-javadoc', version: '0.1.0'
  // These should really be testImplementation, but put them in implementation so
  // javadoc target works without change for test files.
  implementation group: 'junit', name: 'junit', version: '4.12'
  implementation group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  implementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

  compile 'org.ajoberstar:grgit:2.3.0'
}

///
/// Testing
///

task copyHw3TestScripts(type: Copy) {
  from "src/test/java/hw3"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw3/"
}

task copyHw6TestScripts(type: Copy) {
  from "src/test/java/hw6"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw6/"
}

task copyHw6StaffTestScripts(type: Copy) {
  from "src/staffTest/java/hw6"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/staffTest/hw6/"
}

task copyHw6TestData(type: Copy) {
  from "src/staffTest/java/hw6/data"
  include "*.tsv"
  into "src/main/java/hw6/data"
}

task copyHw7TestScripts(type: Copy) {
  from "src/test/java/hw7"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw7/"
}

task copyHw8TestScripts(type: Copy) {
  from "src/test/java/hw8"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw8/"
}

test {
  // Comment out a line to start work on that homework.
  // exclude 'hw2/**'
  // exclude 'hw3/**'
  // exclude 'hw4/**'
  // exclude 'hw5/**'
  // exclude 'hw6/**'
  exclude 'hw7/**'
  exclude 'hw8/**'
}
test.dependsOn copyHw3TestScripts
test.dependsOn copyHw6TestScripts
test.dependsOn copyHw7TestScripts
test.dependsOn copyHw8TestScripts

tasks.withType(Test) {
    enableAssertions = true
}

///
/// Javadoc
///

configurations {
  taglet
}

dependencies {
  taglet "org.plumelib:javadoc331:0.0.1"
}

tasks.withType(Javadoc) {
  options {
    taglets "javadoc331.DerivedfieldTaglet",
      "javadoc331.EffectsTaglet",
      "javadoc331.ModifiesTaglet",
      "javadoc331.RequiresTaglet",
      "javadoc331.ReturnsTaglet",
      "javadoc331.SpecfieldTaglet"
    tagletPath(configurations.taglet.files as File[])
  }
}
tasks.withType(Javadoc) {
  options.addStringOption('Xwerror', '-quiet')
}


///
/// Extra code quality checks
///

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task requireJava8 {
  if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    throw new GradleException("You must use Java 8")
  }
}
build.dependsOn requireJava8

// Creates task `runErrorProne`, which runs the Error Prone linter.
// For more information: https://errorprone.info
tasks.create(name: 'runErrorProne', type: JavaCompile, group: 'Validation') {
  description 'Run the error-prone compiler on the main sources'
  toolChain net.ltgt.gradle.errorprone.ErrorProneToolChain.create(project)
  source = sourceSets.main.java.asFileTree
  classpath = sourceSets.main.compileClasspath.asFileTree
  destinationDir = new File("${buildDir}", 'errorprone')

  options.compilerArgs = [
    '-Werror',
    '-Xep:ClassCanBeStatic:OFF',
  ]
}
build.dependsOn runErrorProne

build.dependsOn javadoc

// Require Javadoc on all members.
// For more information: https://github.com/plume-lib/require-javadoc
task requireJavadoc(type: Javadoc) {
  description = 'Ensures that Javadoc documentation exists.'
  destinationDir temporaryDir
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath
  options.docletpath = project.sourceSets.main.compileClasspath as List
  options.doclet = "org.plumelib.javadoc.RequireJavadoc"
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.addStringOption('skip', 'CalculatorFrame|PolyGraph')
}
build.dependsOn requireJavadoc

///
/// Code formatting:
/// For more information: https://github.com/plume-lib/run-google-java-format
///

task getCodeFormatScripts {
  description "Obtain the run-google-java-format scripts"
  doLast {
    if (! new File("$projectDir/.run-google-java-format").exists()) {
      def rgjfGit = Grgit.clone(dir: "$projectDir/.run-google-java-format", uri: 'https://github.com/plume-lib/run-google-java-format.git')
    } else {
      def rgjfGit = Grgit.open(dir: "$projectDir/.run-google-java-format")
      rgjfGit.pull()
    }
  }
}

task pythonIsInstalled(type: Exec) {
  description "Check that the python executable is installed."
  executable = "python"
  args "--version"
}

task checkFormat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Formatting') {
  description "Check whether the Java source code is properly formatted"
  def javaFiles = fileTree("$projectDir").matching{ include "**/*.java" } as List
  def pythonArgs = javaFiles.clone()
  pythonArgs.add(0, "$projectDir/.run-google-java-format/check-google-java-format.py")

  commandLine "python"
  args pythonArgs
  ignoreExitValue true

  doLast {
    if (execResult.exitValue != 0) {
      throw new GradleException("Found improper formatting, try running:  ./gradlew reformat")
    }
  }
}

task reformat(type: Exec, dependsOn: [getCodeFormatScripts, pythonIsInstalled], group: 'Formatting') {
  description "Format the Java source code according to the Google Java Format style"
  def javaFiles = fileTree("$projectDir").matching{ include "**/*.java" } as List
  def pythonArgs = javaFiles.clone()
  pythonArgs.add(0, "$projectDir/.run-google-java-format/run-google-java-format.py")

  commandLine "python"
  args pythonArgs
}


///
/// Validation: Checking additional assignment requirements
///

// FAILS if there are any unpushed commits.
task checkNoUnpushedCommits {
  description = 'Ensure there are no unpushed commits.'
  doLast {
    // Command-line version: git rev-list origin..HEAD
    def unpushedCommits = grgit.log(includes: ['master'], excludes: ['origin/master'])
    if (unpushedCommits.size() != 0) {
      throw new GradleException("There are unpushed commits. Run `git status` for details.")
    }
  }
}

// FAILS if there are any unstaged, or staged but uncommitted, changes.
task checkNoUncommittedChanges {
  description = 'Ensure there are no uncommitted changes.'
  doLast {
    // Command-line version: git status --untracked-files=no --porcelain

    def status = grgit.status()
    if (! status.conflicts.isEmpty()) {
      throw new GradleException("There are conflicts. Run `git status` for details.")
    }
    if (! status.staged.allChanges.isEmpty()) {
      throw new GradleException("There are staged but uncommitted changes. Run `git status` for details.")
    }
    // Permit unstaged added files
    if (! (status.unstaged.modified + status.unstaged.removed).isEmpty()) {
      throw new GradleException("There are unstaged changes. Run `git status` for details.")
    }
  }
}

task validateWorkingCopy(group: 'Validation') {
  description = 'Validate the working copy.  Ensures that the project builds and that required files exist.'
  doLast {
    def String[] homeworkProperties = homeworks.split(',')
    homeworkProperties.each { requiredHwFiles ->
      def String[] requiredFiles = getProperty(requiredHwFiles).split(',')
      requiredFiles.each { fileName ->
        fileName = fileName.trim()
        if (! file("src/main/java/${fileName}").exists()) {
	  throw new GradleException("File ${fileName} does not exist.")
	}
      }
    }
  }
}
validateWorkingCopy.dependsOn clean
validateWorkingCopy.dependsOn build
// validateWorkingCopy.dependsOn checkFormat

task validateLocalRepo(type: GradleBuild, group: 'Validation') {
  description = 'Validates the local repository.  Runs validateWorkingCopy on a fresh clone of it.  Fails if there are uncommitted changes.'
  def validationRepo = "${temporaryDir}/validationRepo"
  doFirst {
    // delete may fail because of hanging file descriptors, so rename instead :-(
    file(validationRepo).renameTo(file(validationRepo + new Random().nextInt(1000000)))
    Grgit.clone(dir: validationRepo, uri: "${projectDir}")
  }

  dir = validationRepo
  tasks = ["validateWorkingCopy"]
}
validateLocalRepo.dependsOn checkNoUncommittedChanges

task validateRemote(type: GradleBuild, group: 'Validation') {
  description = 'Validates the remote repository.  Runs validateWorkingCopy on a fresh clone of it.  Fails if there are uncommitted changes or unpushed commits.'
  def validationRepo = "${temporaryDir}/validationRepo"
  doFirst {
    // delete may fail because of hanging file descriptors, so rename instead :-(
    file(validationRepo).renameTo(file(validationRepo + new Random().nextInt(1000000)))
    // Command-line equivalent for "remote" variable: git remote get-url origin
    // HACK: Assume there is just one remote.  We want the remote named "origin".
    assert grgit.remote.list().size() == 1
    def remote = grgit.remote.list().get(0).url
    Grgit.clone(dir: validationRepo, uri: remote)
  }

  dir = validationRepo
  tasks = ["validateWorkingCopy"]
}
validateRemote.dependsOn checkNoUncommittedChanges
validateRemote.dependsOn checkNoUnpushedCommits

// This task is not advertised.
task validate {
  dependsOn validateRemote
}

///
/// Other targets
///

task cleanByRenaming {
  description = 'Use this when the "clean" target fails due to "unable to delete file" "device or resource busy".'
  doLast {
    File destinationDir = new File("${buildDir}", 'deleteme-' + new Random().nextInt(1000000))
    mkdir destinationDir
    println "destinationDir = " + destinationDir
    buildDir.eachFile { f ->
      println "Processing " + f
      f.renameTo(new File(destinationDir, f.getName()))
    }
  }
}


///
/// Targets for course staff use
///

task javadocStaging(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = new File("/cse/web/courses/cse331/staff/staging/api")
}

task javadocPublic(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = new File("/cse/web/courses/cse331/18au/api")
}

sourceSets {
  staffTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

configurations {
  staffTestImplementation.extendsFrom testImplementation
  staffTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task staffTest(type: Test) {
  description = "Runs staff Tests"
  testClassesDirs = sourceSets.staffTest.output.classesDirs
  classpath = sourceSets.staffTest.runtimeClasspath

  // For debugging purposes
  outputs.upToDateWhen { false }
  testLogging {
    events = ["passed", "failed", "skipped"]
    showStandardStreams = true
  }
}
staffTest.dependsOn copyHw6StaffTestScripts
staffTest.dependsOn copyHw6TestData

